

ex :
name : shell comands  #  user difine 

on : [push]
jobs :
  run-shell-commands:  #  user difine  i can name it 'my-command-dbah' 
    runs-on: ubuntu-latest
    steps:
      - name : echo a 
        run: echo "hello world"
      - name: multline script
        run: |
          node -v
          npm -v


- stata  Workflow Name:

name: shell commands: Specifies the name of the workflow.
Event Trigger:

on: [push]: Indicates that the workflow should be triggered on a push event.
Job:

jobs:: Begins the definition of jobs for the workflow.
run-shell-commands:: The job is named "run-shell-commands."
Operating System:

runs-on: ubuntu-latest: Specifies that the job runs on an Ubuntu environment.
Steps:

steps:: Begins the definition of steps for the job.
Step 1: Echo a String:

- name: echo a: The first step is named "echo a."
run: echo "hello world": Executes the echo command to print "hello world."
Step 2: Multiline Script:

- name: multiline script: The second step is named "multiline script."
run: |: Begins a multiline script block.
Copy code
node -v
npm -v

/* ---------------------- to enable more debug message ---------------------- */
go to settings  -> Secrets and variables  and add ACTIONS_RUNNER_DEBUG  : true  , ACTIONS_STEP_DEBUG:true 


/* ---------------------------- The run: | syntax --------------------------- */
is used to indicate the start of a multiline script block.
Here's an example of how you might use the run: | syntax in a GitHub Actions workflow:

yaml
Copy code
jobs:
  my-job:
    runs-on: ubuntu-latest
    steps:
      - name: Run a multiline script
        run: |
          echo "This is line 1"
          echo "This is line 2"
          echo "This is line 3"

/* ----------------------------------- job ---------------------------------- */
each Operating System need diffrent Job
each job work in parallel

/* ---------------------------------- shell --------------------------------- */
to run anther terminal on os in vm   that means shell not exist on os but it will start vm for the shell
ex:
windows-command:
runs-on: windows-latest
steps:
  - name: runs command
    run: Get-Location 
  - name: bash directory 
    run: pwd
    shell: bash  # windows does not have bash shell  but it will start vm for you

/* ---------------------------------- need ---------------------------------- */
by default  jobs run in parallel if job depends on anther use 
need: [ job name ]

ex:

# name : ahmed  comands

# on : [push]
# jobs :
#   run-dbah-commands:
#     runs-on: ubuntu-latest
#     steps:
#       - name : echo a 
#         run: echo "hello world"
#       - name: multline script
#         run: |
#           node -v
#           npm -v



name : ahmed_workfloe

on: [push]

jobs:
  sh-command:
    runs-on: ubuntu-latest
    steps:
      - name: runs command
        run: echo "hello ahmed  world "
    
  windows-command:
    runs-on: windows-latest
    needs: [ sh-command]  # job  windows-command will runs after sh-command
      - name: runs command
        run: Get-Location 
      - name: bash directory 
        run: pwd
        shell: bash


* actions can have inputs  ( with:)  and we can use other actions that published in GitHub
ex:

name : javaScript-workflow

on: [push]

jobs:
  run-js-job:
    runs-on : ubuntu-latest
    steps:
     - name: import js 
       id: greet # steps can has id 
       uses: actions/hello-world-javascript-action@main   # use other actions 
       with:
        who-to-greet:  dbah
     - name: log greet
       run : echo "${{ steps.greet.output.time}}"
 
 /* --------------------------- actions/checkout@v3 -------------------------- */
 to clone your code to te current directory of the terminal use  actions/checkout@v3 available in GitHub
 ex:

 
name : javaScript-workflow
   
on: [push]

jobs:
  run-js-job:
    runs-on : ubuntu-latest
    steps:
     - name: checkout
       uses: actions/checkout@v3 # without this step the   ls -a will  not list any file 
     - name: list fils 
       run: |
         pwd
         ls -a
      
/* ------------------------------ GitHub Events ----------------------------- */

Push Event:

Triggered when commits are pushed to a branch.
yaml
Copy code
on:
  push:
    branches:
      - main

Pull Request Event:

Triggered when a pull request is opened, synchronized, or closed.
yaml
Copy code
on:
  pull_request:
    branches:
      - main

Schedule Event:

Triggered at scheduled intervals.
yaml
Copy code
on:
  schedule:
    - cron: '0 0 * * *'
Workflow Dispatch Event:

Manually triggered by a user or an external event.
yaml
Copy code
on:
  workflow_dispatch:
Repository Dispatch Event:

Triggered by an external event using the GitHub API.
yaml
Copy code
on:
  repository_dispatch:
    types: [my-event-type]
Tag Event:

Triggered when a new tag is created.
yaml
Copy code
on:
  push:
    tags:
      - '*'
Create Event:

Triggered when a branch or tag is created.
yaml
Copy code
on:
  create:
    branches:
      - main
Delete Event:

Triggered when a branch or tag is deleted.
yaml
Copy code
on:
  delete:
    branches:
      - main
    

/* ------------------------------ activity type ----------------------------- */
some events has Specific actitvity type like pull_request

on:
  pull_request:
    types:
      - opened
      - synchronize
      - closed
    branches:
      - main
if you not specify the type it has default like opend 

/* -------------------------------- schedule -------------------------------- */
use do schedule  action every specific time 
to learn more about cron go to  https://crontab.guru/

ex:
name : javaScript-workflow-schedule
   
on:
  schedule:
  - cron: "0/5 * * * *"  # run every 5 minites  the minimam time to run is every 5 minits

  /* --------------------------- repository_dispatch -------------------------- */

  GitHub Actions external triggers allow you to start a workflow run in response to an external
   event, such as an API call. This feature enables various use cases to automate workflows based on events outside the repository

   Usecases 
Manual Workflow Triggers:
  You can set up an external trigger to manually start a workflow run.
   This can be useful for scenarios where a human intervention is required before certain automated processes are initiated

example
1-GitHub actions   
on:
  # schedule:
  # - cron: "0/5 * * * *"
  repository_dispatch: 
    types: [build] # could be anything 


2- postman 
  *post metho on  (https://api.github.com/repos/owner/repository/dispatches)  # ex :https://api.github.com/repos/AhmedAbdelerhman/gitHub-actions/dispatches
  *get token from github settings  and put it on  basic authrization on filed password  (postman)
  * send on bady json : {
    "event_type":"build" #  build is the same word in gitHub action 
}


/* -------------------------------- branches -------------------------------- */
select branch to trigger event  or exclude one 

 
on:
  # schedule:
  # - cron: "0/5 * * * *"
  push: 
    branches: 
      - master 
      - "bug/*" # match bug/any  but not bug/any/any
      - "bug/**"  # match bug/any/any
    branches-ignore: 
      - dev

      /* ------------------------------ paths-ignore ------------------------------ */
    
    
      name : javaScript-workflow-schedule
   
      on:
        # schedule:
        # - cron: "0/5 * * * *"
        push: 
          branches: 
            - master 
            - "bug/*" # match bug/any  but not bug/any/any
            - "bug/**"  # match bug/any/any
          branches-ignore: 
            - dev
          paths-ignore: 
            - "docs/**"  # ignore any fils inside docs file

           /* ---------------------------- $ vs {{}} vs ${} ---------------------------- */
  
           Dollar Sign ($):

           The dollar sign is used for basic variable substitution.
           It is used to reference environment variables directly without any additional processing.
           For example: $GITHUB_REPOSITORY or $RUNNER_OS.
           yaml
           Copy code
           jobs:
             example-job:
               runs-on: ubuntu-latest
           
               steps:
                 - name: Print Repository Name
                   run: echo "Repository: $GITHUB_REPOSITORY"

           Single Curly Braces (${}):
           
           Single curly braces are used for variable substitution within strings.
           It is useful when you need to include a variable's value within a string without any additional expressions.
           For example: "This is a string with a variable: ${variable}".
           yaml
           Copy code
           jobs:
             example-job:
               runs-on: ubuntu-latest
           
               steps:
                 - name: Print Message
                   run: echo "Message: ${GITHUB_REPOSITORY} is awesome!"

           Double Curly Braces (${{ }}): "nested object"
           
           Double curly braces are used for more advanced features like expressions, operations, and context-specific values.
           It allows you to perform operations and expressions within the context of GitHub Actions.
           For example: ${{ env.VARIABLE_NAME }} or ${{ github.event_name }}.
           yaml
           Copy code
           jobs:
             example-job:
               runs-on: ubuntu-latest
           
               steps:
                 - name: Conditional Step
                   if: ${{ github.event_name == 'push' }}
                   run: echo "This step runs only on push events."
           In summary:
           
           Use $ for basic variable substitution.
           Use ${} for variable substitution within strings.
           Use ${{ }} for more advanced features, expressions, and context-specific values in the GitHub Actions workflow syntax.

    not any varable works with $ can work with ${}

 /* --------------------- env  (workflow vs job vs step ) -------------------- */

 name : Env Variable 

on: [push]

env:
  Workflow_env: Available to all  jobs  # avaable for all workflow

jobs:
  log-env:
    runs-on: ubuntu-latest
    env:  
      job_env: Available only for local job  log-env  # available for job only
    steps:
     - name: log Env variables
       env:
          step_env: Available only for local step  step_env  #avaable for step only 
       run: |
         echo " WF_Env ${Workflow_env}"
         echo " job_env ${job_env}"
         echo " step_env ${step_env}"
     -  name:  my step 2
        run: |
         echo " WF_Env ${Workflow_env}"
         echo " job_env ${job_env}"
         echo " step_env ${step_env}"
  log-default-env:
      runs-on: ubuntu-latest
      steps:
       - name: log log-default-env
         run: |
            echo "GitHub Repository: ${GITHUB_REPOSITORY}"
            echo "Repository Owner: $GITHUB_REPOSITORY_OWNER"
            echo "Repository Name: $GITHUB_REPOSITORY_NAME"
       
            echo " WF_Env ${Workflow_env}"
            echo " job_env ${job_env}"
            echo " step_env ${step_env}"
            echo " event_name ${{github.event_name}}"

/* ------------------------- how to add deycript env ------------------------ */
go to github setting of the rep select  secrets then add env with value you want 
this value will deycript in gitHub 
ex: i made secreat called WF_DBAH_ENV in github 

env:
  Workflow_env:  ${{secrets.WF_DBAH_ENV}}


/* ------------------------ GitHub Actions, contexts ------------------------ */
its an object you can access   information about the GitHub environment, 
the workflow, and the event that triggered the workflow most used (gitHub , job , secrets , env ,steps)

github context: 

github.actor: The username of the user or the name of the app that initiated the workflow.
github.event_name: The name of the event that triggered the workflow (e.g., push, pull_request).
github.repository: The owner and repository name (e.g., owner/repo).
github.repository_owner: The owner of the repository.
github.run_id: The unique identifier of the current run.
github.run_number: The number of the current run for the workflow.
github.sha: The commit SHA that triggered the workflow.
github.workflow: The name of the workflow.

job context:
job.status: The status of the job (e.g., success, failure, cancelled).
job.outputs: Outputs produced by the job that can be used in subsequent steps.

runner context:
runner.os: The operating system of the runner (e.g., Windows, Linux, macOS).
runner.labels: Labels assigned to the runner.

matrix context:
matrix.<key>: Values specified in the matrix configuration, allowing for matrix builds.

secrets context:
secrets.<secret_name>: Provides access to secrets defined in the repository settings.

steps context:
steps.<step_id>: Allows you to reference the outputs of previous steps.

env context:
env.<variable>: Allows you to reference environment variables.

needs context:
needs.<job_id>.outputs.<output_name>: Accesses the outputs of a previous job.

strategy context:
strategy.matrix.<key>: Accesses values from the matrix in a matrix build.


/* ------------------------------ encrypt files ----------------------------- */

what if you have screat size than 64K that can secrets in github store 
you will need to store it in file and encrypt it and decrypt it in github repo

we need tool  gpg  install it in your local mation and go to file directory then 

1-gpg --symmetric --cipher-algo AES256 file.txt         
2-  go to gitHub Secrets AND store the encryption key 
3-

